// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/proto/v1/store_manager.proto

// This document describes the store manager API for NBN23 SwishPay platform.

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StoreService_CreateUser_FullMethodName          = "/store_manager.v1.StoreService/CreateUser"
	StoreService_ReadUser_FullMethodName            = "/store_manager.v1.StoreService/ReadUser"
	StoreService_ReadUserByEmail_FullMethodName     = "/store_manager.v1.StoreService/ReadUserByEmail"
	StoreService_UpdateUser_FullMethodName          = "/store_manager.v1.StoreService/UpdateUser"
	StoreService_DeleteUser_FullMethodName          = "/store_manager.v1.StoreService/DeleteUser"
	StoreService_UpsertPrivacyPolicy_FullMethodName = "/store_manager.v1.StoreService/UpsertPrivacyPolicy"
	StoreService_ReadSubscription_FullMethodName    = "/store_manager.v1.StoreService/ReadSubscription"
	StoreService_AddMember_FullMethodName           = "/store_manager.v1.StoreService/AddMember"
	StoreService_RemoveMember_FullMethodName        = "/store_manager.v1.StoreService/RemoveMember"
)

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # StoreService
//
// StoreService represents the service to manage the store.
type StoreServiceClient interface {
	// CreateUser
	//
	// CreateUser creates a new user.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// ReadUser
	//
	// ReadUser returns the user with the given id.
	ReadUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserResponse, error)
	// ReadUserByEmail
	//
	// ReadUserByEmail returns the user with the given email.
	ReadUserByEmail(ctx context.Context, in *ReadUserByEmailRequest, opts ...grpc.CallOption) (*ReadUserByEmailResponse, error)
	// UpdateUser
	//
	// UpdateUser updates a user.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// DeleteUser
	//
	// DeleteUser deletes a user.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// UpsertPrivacyPolicy
	//
	// UpsertPrivacyPolicy creates or updates the privacy policy of a user.
	UpsertPrivacyPolicy(ctx context.Context, in *UpsertPrivacyPolicyRequest, opts ...grpc.CallOption) (*UpsertPrivacyPolicyResponse, error)
	// ReadSubscription
	//
	// ReadSubscription returns the subscription with the given id.
	ReadSubscription(ctx context.Context, in *ReadSubscriptionRequest, opts ...grpc.CallOption) (*ReadSubscriptionResponse, error)
	// AddMember
	//
	// AddMember adds a member to a subscription.
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error)
	// RemoveMember
	//
	// RemoveMember removes a member from a subscription.
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, StoreService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ReadUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadUserResponse)
	err := c.cc.Invoke(ctx, StoreService_ReadUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ReadUserByEmail(ctx context.Context, in *ReadUserByEmailRequest, opts ...grpc.CallOption) (*ReadUserByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadUserByEmailResponse)
	err := c.cc.Invoke(ctx, StoreService_ReadUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, StoreService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, StoreService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) UpsertPrivacyPolicy(ctx context.Context, in *UpsertPrivacyPolicyRequest, opts ...grpc.CallOption) (*UpsertPrivacyPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertPrivacyPolicyResponse)
	err := c.cc.Invoke(ctx, StoreService_UpsertPrivacyPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ReadSubscription(ctx context.Context, in *ReadSubscriptionRequest, opts ...grpc.CallOption) (*ReadSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadSubscriptionResponse)
	err := c.cc.Invoke(ctx, StoreService_ReadSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberResponse)
	err := c.cc.Invoke(ctx, StoreService_AddMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMemberResponse)
	err := c.cc.Invoke(ctx, StoreService_RemoveMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations must embed UnimplementedStoreServiceServer
// for forward compatibility
//
// # StoreService
//
// StoreService represents the service to manage the store.
type StoreServiceServer interface {
	// CreateUser
	//
	// CreateUser creates a new user.
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// ReadUser
	//
	// ReadUser returns the user with the given id.
	ReadUser(context.Context, *ReadUserRequest) (*ReadUserResponse, error)
	// ReadUserByEmail
	//
	// ReadUserByEmail returns the user with the given email.
	ReadUserByEmail(context.Context, *ReadUserByEmailRequest) (*ReadUserByEmailResponse, error)
	// UpdateUser
	//
	// UpdateUser updates a user.
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// DeleteUser
	//
	// DeleteUser deletes a user.
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// UpsertPrivacyPolicy
	//
	// UpsertPrivacyPolicy creates or updates the privacy policy of a user.
	UpsertPrivacyPolicy(context.Context, *UpsertPrivacyPolicyRequest) (*UpsertPrivacyPolicyResponse, error)
	// ReadSubscription
	//
	// ReadSubscription returns the subscription with the given id.
	ReadSubscription(context.Context, *ReadSubscriptionRequest) (*ReadSubscriptionResponse, error)
	// AddMember
	//
	// AddMember adds a member to a subscription.
	AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error)
	// RemoveMember
	//
	// RemoveMember removes a member from a subscription.
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	mustEmbedUnimplementedStoreServiceServer()
}

// UnimplementedStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServiceServer struct {
}

func (UnimplementedStoreServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedStoreServiceServer) ReadUser(context.Context, *ReadUserRequest) (*ReadUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (UnimplementedStoreServiceServer) ReadUserByEmail(context.Context, *ReadUserByEmailRequest) (*ReadUserByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserByEmail not implemented")
}
func (UnimplementedStoreServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedStoreServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedStoreServiceServer) UpsertPrivacyPolicy(context.Context, *UpsertPrivacyPolicyRequest) (*UpsertPrivacyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPrivacyPolicy not implemented")
}
func (UnimplementedStoreServiceServer) ReadSubscription(context.Context, *ReadSubscriptionRequest) (*ReadSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSubscription not implemented")
}
func (UnimplementedStoreServiceServer) AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedStoreServiceServer) RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedStoreServiceServer) mustEmbedUnimplementedStoreServiceServer() {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ReadUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ReadUser(ctx, req.(*ReadUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ReadUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ReadUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ReadUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ReadUserByEmail(ctx, req.(*ReadUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_UpsertPrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPrivacyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).UpsertPrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_UpsertPrivacyPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).UpsertPrivacyPolicy(ctx, req.(*UpsertPrivacyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ReadSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ReadSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ReadSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ReadSubscription(ctx, req.(*ReadSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store_manager.v1.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _StoreService_CreateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _StoreService_ReadUser_Handler,
		},
		{
			MethodName: "ReadUserByEmail",
			Handler:    _StoreService_ReadUserByEmail_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _StoreService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _StoreService_DeleteUser_Handler,
		},
		{
			MethodName: "UpsertPrivacyPolicy",
			Handler:    _StoreService_UpsertPrivacyPolicy_Handler,
		},
		{
			MethodName: "ReadSubscription",
			Handler:    _StoreService_ReadSubscription_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _StoreService_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _StoreService_RemoveMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/store_manager.proto",
}
