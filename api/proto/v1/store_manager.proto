syntax = "proto3";

// This document describes the store manager API for NBN23 SwishPay platform.
package store_manager.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "gen/go";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
      title: "Store manager API";
      version: "1.0.0";
      contact: {
          name: "NBN23";
          url: "https://github.com/NBN23dev/proto-store-manager";
          email: "develop@nbn23.com";
      };
  };
  host: "gcr-store-manager-kgju3lmrya-ew.a.run.app";
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication bearer token: {'Authorization': 'Bearer <token>'}"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

// UserProvider
//
// UserProvider represents the provider of the user.
enum UserProvider {
  USER_PROVIDER_UNSPECIFIED = 0;
  // USER_PROVIDER_APPLE represents a user registered through Apple.
  USER_PROVIDER_APPLE = 1;
  // USER_PROVIDER_GOOGLE represents a user registered through Google.
  USER_PROVIDER_GOOGLE = 2;
  // USER_PROVIDER_CUSTOM represents a user registered through email and password.
  USER_PROVIDER_CUSTOM = 3;  
}

// SubscriptionType 
//
// SubscriptionType represents the type of subscription that a user has purchased.
enum SubscriptionType {
  SUBSCRIPTION_TYPE_UNSPECIFIED = 0;
  // SUBSCRIPTION_TYPE_TRIAL represents a trial subscription.
  SUBSCRIPTION_TYPE_TRIAL= 1;
  // SUBSCRIPTION_TYPE_PREMIUM represents a premium subscription.
  SUBSCRIPTION_TYPE_PREMIUM = 2;
  // SUBSCRIPTION_TYPE_MANUAL_PREMIUM represents a manual premium subscription.
  SUBSCRIPTION_TYPE_MANUAL_PREMIUM = 3;
  // SUBSCRIPTION_TYPE_FREE represents a user with no subscription.
  SUBSCRIPTION_TYPE_FREE = 4;
}

// SubscriptionCode 
//
// SubscriptionCode represents the code of the subscription.
enum SubscriptionCode {
  SUBSCRIPTION_CODE_UNSPECIFIED = 0;
  // SUBSCRIPTION_CODE_STARTED represents that a subscription has started.
  SUBSCRIPTION_CODE_STARTED= 1;
  // SUBSCRIPTION_CODE_RENEWED represents that a subscription has been renewed.
  SUBSCRIPTION_CODE_RENEWED = 2;
  // SUBSCRIPTION_CODE_CANCELLED represents that a subscription has been cancelled.
  SUBSCRIPTION_CODE_CANCELLED = 3;
  // SUBSCRIPTION_CODE_EXPIRED represents that a subscription has expired.
  SUBSCRIPTION_CODE_EXPIRED = 4;
}

// SubscriptionProvider
//
// SubscriptionProvider represents the provider of the subscription.
enum SubscriptionProvider {
  SUBSCRIPTION_PROVIDER_UNSPECIFIED = 0;
  // SUBSCRIPTION_PROVIDER_APPLE represents a subscription purchased through Apple.
  SUBSCRIPTION_PROVIDER_APPLE = 1;
  // SUBSCRIPTION_PROVIDER_GOOGLE represents a subscription purchased through Google.
  SUBSCRIPTION_PROVIDER_GOOGLE = 2;
  // SUBSCRIPTION_PROVIDER_STRIPE represents a subscription purchased through Stripe.
  SUBSCRIPTION_PROVIDER_STRIPE = 3;
  // SUBSCRIPTION_PROVIDER_PAYCOMET represents a subscription purchased through Paycomet.
  SUBSCRIPTION_PROVIDER_PAYCOMET = 4;  
}

// SubscriptionCategory
//
// SubscriptionCategory represents the category of the subscription.
enum SubscriptionCategory {
  SUBSCRIPTION_CATEGORY_UNSPECIFIED = 0;
  // SUBSCRIPTION_CATEGORY_GIFT represents a subscription purchased as a gift.
  SUBSCRIPTION_CATEGORY_GIFT = 1;
  // SUBSCRIPTION_CATEGORY_GROUP represents a subscription purchased as a group.
  SUBSCRIPTION_CATEGORY_GROUP = 2; 
}

// SubscriptionPayload
//
// SubscriptionPayload represents the payload of a subscription.
message SubscriptionPayload {
  // product_id is the unique identifier of the product.
  string product_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // purchase_token is the purchase token of the subscription.
  string purchase_token = 2 [(buf.validate.field).string = {min_len: 3, max_bytes: 7168}];
  // provider is the provider of the subscription.
  SubscriptionProvider provider = 3 [(buf.validate.field).enum = {not_in: [0]}];
  // purchased_at is the time when the subscription was purchased.
  google.protobuf.Timestamp purchased_at = 4 [(buf.validate.field).timestamp.gte.seconds = 0];
  // expires_at is the time when the subscription expires.
  google.protobuf.Timestamp expires_at = 5 [(buf.validate.field).timestamp.gte.seconds = 0];
}

// ProductPayload
//
// ProductPayload represents the payload of a product.
message ProductPayload {
  // members is the number of members that the subscription has.
  optional int32 members = 1 [(buf.validate.field).int32 = {gt: 1}];
  // member_emails is the list of emails of the members of the subscription.
  repeated string member_emails = 2 [(buf.validate.field).repeated.items.string.email = true];
  // owner_id is the unique identifier of the owner of the subscription.
  optional string owner_id = 3 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // gifted_id is the unique identifier of the user who gifted the subscription.
  optional string gifted_id = 4 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
}

// Subscription
//
// Subscription represents a subscription that a user has purchased.
message Subscription {
  // user_id is the unique identifier of the user.
  string user_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // type is the type of the subscription.
  SubscriptionType type = 3 [(buf.validate.field).enum = {not_in: [0]}];
  // code is the code of the subscription.
  optional SubscriptionCode code = 4 [(buf.validate.field).enum = {not_in: [0]}];  
  // category is the category of the subscription.
  optional SubscriptionCategory category = 5 [(buf.validate.field).enum = {not_in: [0]}];  
  // subscription_payload is the payload of the subscription.
  optional SubscriptionPayload subscription_payload = 6 [(buf.validate.field) = {required: false}];
  // product_payload is the payload of the product.
  optional ProductPayload product_payload = 7 [(buf.validate.field) = {required: false}];
}

// PrivacyPolicy
//
// PrivacyPolicy represents a privacy policy accepted by the user.
message PrivacyPolicy {
  // version is the version of the privacy policy.
  string version = 1 [(buf.validate.field).string = {min_len: 1, max_len: 3}];
  // policy_date is the date when the privacy policy was created.
  google.protobuf.Timestamp policy_date = 2 [(buf.validate.field).timestamp.gte.seconds = 0];  
  // accepted_date is the date when the privacy policy was accepted.
  google.protobuf.Timestamp accepted_date = 3 [(buf.validate.field).timestamp.gte.seconds = 0];
  // business_communications is the acceptance of business communications.
  bool business_communications = 4;
  // marketing_segmentation is the acceptance of marketing segmentation.
  bool marketing_segmentation = 5;
  // data_transfer is the acceptance of data transfer.
  bool data_transfer = 6;
}

// User
//
// User represents a user of the application.
message User {
  // id is the unique identifier of the user.
  string id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // email is the email of the user.
  string email = 2 [(buf.validate.field).string.email = true];
  // name is the name of the user.
  optional string name = 3 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // image is the image URL of the user.
  optional string image = 4 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // provider is the provider of the user.
  UserProvider provider = 5 [(buf.validate.field).enum = {not_in: [0]}];
  // privacy_policies is the list of privacy policies accepted by the user.
  repeated PrivacyPolicy privacy_policies = 6;
}

// CreateUserRequest
//
// CreateUserRequest represents a request to create a user.
message CreateUserRequest {
  // user_id is the unique identifier of the user.
  string user_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}]; 
  // email is the email of the user.
  string email = 3 [(buf.validate.field).string.email = true];
  // name is the name of the user.
  optional string name = 4 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // image is the image URL of the user.
  optional string image = 5 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // provider is the provider of the user.
  UserProvider provider = 6 [(buf.validate.field).enum = {not_in: [0]}];
}

// ReadUserRequest
//
// ReadUserRequest represents a request to get a user.
message ReadUserRequest {
  // user_id is the unique identifier of the user.
  string user_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}];  
}

// ReadUserByEmailRequest
//
// ReadUserByEmailRequest represents a request to get a user by email.
message ReadUserByEmailRequest {
  // email is the email of the user.
  string email = 1 [(buf.validate.field).string.email = true];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}];  
}

// UpdateUserRequest
//
// UpdateUserRequest represents a request to update a user.
message UpdateUserRequest {
  // user_id is the unique identifier of the user.
  string user_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}]; 
  // name is the name of the user.
  optional string name = 4 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // image is the image URL of the user.
  optional string image = 5 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // provider is the provider of the user.
  optional UserProvider provider = 6 [(buf.validate.field).enum = {not_in: [0]}];  
}

// DeleteUserRequest
//
// DeleteUserRequest represents a request to delete a user.
message DeleteUserRequest {
  // user_id is the unique identifier of the user.
  string user_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}]; 
}

// UpsertPrivacyPolicyRequest
//
// UpsertPrivacyPolicyRequest represents a request to create or update the privacy policy of a user.
message UpsertPrivacyPolicyRequest {
  // user_id is the unique identifier of the user.
  string user_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // business_communications is the acceptance of business communications.
  bool business_communications = 3;
  // marketing_segmentation is the acceptance of marketing segmentation.
  bool marketing_segmentation = 4;
  // data_transfer is the acceptance of data transfer.
  bool data_transfer = 5;
}

// ReadSubscriptionRequest
//
// ReadSubscriptionRequest represents a request to get a subscription.
message ReadSubscriptionRequest {
  // user_id is the unique identifier of the user.
  string user_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
}

// AddMemberRequest
//
// AddMemberRequest represents a request to add a member to a subscription.
message AddMemberRequest {
  // user_id is the unique identifier of the user.
  string user_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // recipient is the email of the member to add to the subscription.
  string recipient = 3 [(buf.validate.field).string.email = true];
}

// RemoveMemberRequest
//
// RemoveMemberRequest represents a request to remove a member from a subscription.
message RemoveMemberRequest {
  // user_id is the unique identifier of the user.
  string user_id = 1 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // app_id is the unique identifier of the application.
  string app_id = 2 [(buf.validate.field).string = {min_len: 3, max_len: 32}];
  // recipient is the email of the member to remove from the subscription.
  string recipient = 4 [(buf.validate.field).string.email = true];
}

// CreateUserResponse
//
// CreateUserResponse represents a response to create a user.
message CreateUserResponse {
  // success is the success of the operation.
  bool success = 1;
}

// ReadUserResponse
//
// ReadUserResponse represents a response to get a user.
message ReadUserResponse {
  // user is the user.
  User user = 1;
}

// ReadUserByEmailResponse
//
// ReadUserByEmailResponse represents a response to get a user by email.
message ReadUserByEmailResponse {
  // user is the user.
  User user = 1;
}

// UpdateUserResponse
//
// UpdateUserResponse represents a response to update a user.
message UpdateUserResponse {
  // success is the success of the operation.
  bool success = 1;
}

// DeleteUserResponse
//
// DeleteUserResponse represents a response to update a user.
message DeleteUserResponse {
  // success is the success of the operation.
  bool success = 1;
}

// UpsertPrivacyPolicyResponse
//
// UpsertPrivacyPolicyResponse represents a response to create or update the privacy policy of a user.
message UpsertPrivacyPolicyResponse {
  // success is the success of the operation.
  bool success = 1;
}

// ReadSubscriptionResponse
//
// ReadSubscriptionResponse represents a response to get a subscription.
message ReadSubscriptionResponse {
  // subscription is the subscription.
  Subscription subscription = 1;
}

// AddMemberResponse
// 
// AddMemberResponse represents a response to add a member to a subscription.
message AddMemberResponse {
  // success is the success of the operation.
  bool success = 1;
}

// RemoveMemberResponse
// 
// RemoveMemberResponse represents a response to remove a member from a subscription.
message RemoveMemberResponse {
  // success is the success of the operation.
  bool success = 1;
}

// StoreService
//
// StoreService represents the service to manage the store.
service StoreService {
  // CreateUser
  //
  // CreateUser creates a new user.
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      put: "/v1/users/{user_id}/apps/{app_id}"
      body: "*"
    };
  }

  // ReadUser
  //
  // ReadUser returns the user with the given id.
  rpc ReadUser (ReadUserRequest) returns (ReadUserResponse) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}/apps/{app_id}"
    };
  }

  // ReadUserByEmail
  //
  // ReadUserByEmail returns the user with the given email.
  rpc ReadUserByEmail (ReadUserByEmailRequest) returns (ReadUserByEmailResponse) {
    option (google.api.http) = {
      get: "/v1/users/email/{email}/apps/{app_id}"
    };
  }
  
  // UpdateUser
  //
  // UpdateUser updates a user.
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users/{user_id}/apps/{app_id}"
      body: "*"
    };
  }

  // DeleteUser
  //
  // DeleteUser deletes a user.
  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1/users/{user_id}/apps/{app_id}"
    };
  }

  // UpsertPrivacyPolicy
  //
  // UpsertPrivacyPolicy creates or updates the privacy policy of a user.
  rpc UpsertPrivacyPolicy (UpsertPrivacyPolicyRequest) returns (UpsertPrivacyPolicyResponse) {
    option (google.api.http) = {
      post: "/v1/users/{user_id}/apps/{app_id}/privacy-policy"
      body: "*"
    };
  }

  // ReadSubscription
  //
  // ReadSubscription returns the subscription with the given id.
  rpc ReadSubscription (ReadSubscriptionRequest) returns (ReadSubscriptionResponse) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}/apps/{app_id}/subscription"
    };
  }

  // AddMember
  //
  // AddMember adds a member to a subscription.
  rpc AddMember (AddMemberRequest) returns (AddMemberResponse) {
    option (google.api.http) = {
      put: "/v1/users/{user_id}/apps/{app_id}/subscription/members"
      body: "*"
    };
  }

  // RemoveMember
  //
  // RemoveMember removes a member from a subscription.
  rpc RemoveMember (RemoveMemberRequest) returns (RemoveMemberResponse) {
    option (google.api.http) = {
      delete: "/v1/users/{user_id}/apps/{app_id}/subscription/members/{recipient}"
    };
  }
}