{
  "swagger": "2.0",
  "info": {
    "title": "Store manager API",
    "description": "This document describes the store manager API for NBN23 SwishPay platform.",
    "version": "1.0.0",
    "contact": {
      "name": "NBN23",
      "url": "https://github.com/NBN23dev/proto-store-manager",
      "email": "develop@nbn23.com"
    }
  },
  "tags": [
    {
      "name": "StoreService"
    }
  ],
  "host": "gcr-store-manager-kgju3lmrya-ew.a.run.app",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/users/email/{email}/apps/{appId}": {
      "get": {
        "summary": "ReadUserByEmail",
        "description": "ReadUserByEmail returns the user with the given email.",
        "operationId": "StoreService_ReadUserByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReadUserByEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "description": "email is the email of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "description": "app_id is the unique identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StoreService"
        ]
      }
    },
    "/v1/users/{userId}/apps/{appId}": {
      "get": {
        "summary": "ReadUser",
        "description": "ReadUser returns the user with the given id.",
        "operationId": "StoreService_ReadUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReadUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "user_id is the unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "description": "app_id is the unique identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StoreService"
        ]
      },
      "delete": {
        "summary": "DeleteUser",
        "description": "DeleteUser deletes a user.",
        "operationId": "StoreService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "user_id is the unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "description": "app_id is the unique identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StoreService"
        ]
      },
      "post": {
        "summary": "UpdateUser",
        "description": "UpdateUser updates a user.",
        "operationId": "StoreService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "user_id is the unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "description": "app_id is the unique identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoreServiceUpdateUserBody"
            }
          }
        ],
        "tags": [
          "StoreService"
        ]
      },
      "put": {
        "summary": "CreateUser",
        "description": "CreateUser creates a new user.",
        "operationId": "StoreService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "user_id is the unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "description": "app_id is the unique identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoreServiceCreateUserBody"
            }
          }
        ],
        "tags": [
          "StoreService"
        ]
      }
    },
    "/v1/users/{userId}/apps/{appId}/privacy-policy": {
      "post": {
        "summary": "UpsertPrivacyPolicy",
        "description": "UpsertPrivacyPolicy creates or updates the privacy policy of a user.",
        "operationId": "StoreService_UpsertPrivacyPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertPrivacyPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "user_id is the unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "description": "app_id is the unique identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoreServiceUpsertPrivacyPolicyBody"
            }
          }
        ],
        "tags": [
          "StoreService"
        ]
      }
    },
    "/v1/users/{userId}/apps/{appId}/subscription": {
      "get": {
        "summary": "ReadSubscription",
        "description": "ReadSubscription returns the subscription with the given id.",
        "operationId": "StoreService_ReadSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReadSubscriptionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "user_id is the unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "description": "app_id is the unique identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StoreService"
        ]
      }
    },
    "/v1/users/{userId}/apps/{appId}/subscription/members": {
      "put": {
        "summary": "AddMember",
        "description": "AddMember adds a member to a subscription.",
        "operationId": "StoreService_AddMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "user_id is the unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "description": "app_id is the unique identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoreServiceAddMemberBody"
            }
          }
        ],
        "tags": [
          "StoreService"
        ]
      }
    },
    "/v1/users/{userId}/apps/{appId}/subscription/members/{recipient}": {
      "delete": {
        "summary": "RemoveMember",
        "description": "RemoveMember removes a member from a subscription.",
        "operationId": "StoreService_RemoveMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveMemberResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "user_id is the unique identifier of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appId",
            "description": "app_id is the unique identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "recipient",
            "description": "recipient is the email of the member to remove from the subscription.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StoreService"
        ]
      }
    }
  },
  "definitions": {
    "StoreServiceAddMemberBody": {
      "type": "object",
      "properties": {
        "recipient": {
          "type": "string",
          "description": "recipient is the email of the member to add to the subscription."
        }
      },
      "description": "AddMemberRequest represents a request to add a member to a subscription.",
      "title": "AddMemberRequest"
    },
    "StoreServiceCreateUserBody": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "email is the email of the user."
        },
        "name": {
          "type": "string",
          "description": "name is the name of the user."
        },
        "image": {
          "type": "string",
          "description": "image is the image URL of the user."
        },
        "provider": {
          "$ref": "#/definitions/v1UserProvider",
          "description": "provider is the provider of the user."
        }
      },
      "description": "CreateUserRequest represents a request to create a user.",
      "title": "CreateUserRequest"
    },
    "StoreServiceUpdateUserBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the user."
        },
        "image": {
          "type": "string",
          "description": "image is the image URL of the user."
        },
        "provider": {
          "$ref": "#/definitions/v1UserProvider",
          "description": "provider is the provider of the user."
        }
      },
      "description": "UpdateUserRequest represents a request to update a user.",
      "title": "UpdateUserRequest"
    },
    "StoreServiceUpsertPrivacyPolicyBody": {
      "type": "object",
      "properties": {
        "businessCommunications": {
          "type": "boolean",
          "description": "business_communications is the acceptance of business communications."
        },
        "marketingSegmentation": {
          "type": "boolean",
          "description": "marketing_segmentation is the acceptance of marketing segmentation."
        },
        "dataTransfer": {
          "type": "boolean",
          "description": "data_transfer is the acceptance of data transfer."
        }
      },
      "description": "UpsertPrivacyPolicyRequest represents a request to create or update the privacy policy of a user.",
      "title": "UpsertPrivacyPolicyRequest"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AddMemberResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "success is the success of the operation."
        }
      },
      "description": "AddMemberResponse represents a response to add a member to a subscription.",
      "title": "AddMemberResponse"
    },
    "v1CreateUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "success is the success of the operation."
        }
      },
      "description": "CreateUserResponse represents a response to create a user.",
      "title": "CreateUserResponse"
    },
    "v1DeleteUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "success is the success of the operation."
        }
      },
      "description": "DeleteUserResponse represents a response to update a user.",
      "title": "DeleteUserResponse"
    },
    "v1PrivacyPolicy": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "version is the version of the privacy policy."
        },
        "policyDate": {
          "type": "string",
          "format": "date-time",
          "description": "policy_date is the date when the privacy policy was created."
        },
        "acceptedDate": {
          "type": "string",
          "format": "date-time",
          "description": "accepted_date is the date when the privacy policy was accepted."
        },
        "businessCommunications": {
          "type": "boolean",
          "description": "business_communications is the acceptance of business communications."
        },
        "marketingSegmentation": {
          "type": "boolean",
          "description": "marketing_segmentation is the acceptance of marketing segmentation."
        },
        "dataTransfer": {
          "type": "boolean",
          "description": "data_transfer is the acceptance of data transfer."
        }
      },
      "description": "PrivacyPolicy represents a privacy policy accepted by the user.",
      "title": "PrivacyPolicy"
    },
    "v1ProductPayload": {
      "type": "object",
      "properties": {
        "members": {
          "type": "integer",
          "format": "int32",
          "description": "members is the number of members that the subscription has."
        },
        "memberEmails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "member_emails is the list of emails of the members of the subscription."
        },
        "ownerId": {
          "type": "string",
          "description": "owner_id is the unique identifier of the owner of the subscription."
        },
        "giftedId": {
          "type": "string",
          "description": "gifted_id is the unique identifier of the user who gifted the subscription."
        }
      },
      "description": "ProductPayload represents the payload of a product.",
      "title": "ProductPayload"
    },
    "v1ReadSubscriptionResponse": {
      "type": "object",
      "properties": {
        "subscription": {
          "$ref": "#/definitions/v1Subscription",
          "description": "subscription is the subscription."
        }
      },
      "description": "ReadSubscriptionResponse represents a response to get a subscription.",
      "title": "ReadSubscriptionResponse"
    },
    "v1ReadUserByEmailResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "user is the user."
        }
      },
      "description": "ReadUserByEmailResponse represents a response to get a user by email.",
      "title": "ReadUserByEmailResponse"
    },
    "v1ReadUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "user is the user."
        }
      },
      "description": "ReadUserResponse represents a response to get a user.",
      "title": "ReadUserResponse"
    },
    "v1RemoveMemberResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "success is the success of the operation."
        }
      },
      "description": "RemoveMemberResponse represents a response to remove a member from a subscription.",
      "title": "RemoveMemberResponse"
    },
    "v1Subscription": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "user_id is the unique identifier of the user."
        },
        "appId": {
          "type": "string",
          "description": "app_id is the unique identifier of the application."
        },
        "type": {
          "$ref": "#/definitions/v1SubscriptionType",
          "description": "type is the type of the subscription."
        },
        "code": {
          "$ref": "#/definitions/v1SubscriptionCode",
          "description": "code is the code of the subscription."
        },
        "category": {
          "$ref": "#/definitions/v1SubscriptionCategory",
          "description": "category is the category of the subscription."
        },
        "subscriptionPayload": {
          "$ref": "#/definitions/v1SubscriptionPayload",
          "description": "subscription_payload is the payload of the subscription."
        },
        "productPayload": {
          "$ref": "#/definitions/v1ProductPayload",
          "description": "product_payload is the payload of the product."
        }
      },
      "description": "Subscription represents a subscription that a user has purchased.",
      "title": "Subscription"
    },
    "v1SubscriptionCategory": {
      "type": "string",
      "enum": [
        "SUBSCRIPTION_CATEGORY_UNSPECIFIED",
        "SUBSCRIPTION_CATEGORY_GIFT",
        "SUBSCRIPTION_CATEGORY_GROUP"
      ],
      "default": "SUBSCRIPTION_CATEGORY_UNSPECIFIED",
      "description": "SubscriptionCategory represents the category of the subscription.\n\n - SUBSCRIPTION_CATEGORY_GIFT: SUBSCRIPTION_CATEGORY_GIFT represents a subscription purchased as a gift.\n - SUBSCRIPTION_CATEGORY_GROUP: SUBSCRIPTION_CATEGORY_GROUP represents a subscription purchased as a group.",
      "title": "SubscriptionCategory"
    },
    "v1SubscriptionCode": {
      "type": "string",
      "enum": [
        "SUBSCRIPTION_CODE_UNSPECIFIED",
        "SUBSCRIPTION_CODE_STARTED",
        "SUBSCRIPTION_CODE_RENEWED",
        "SUBSCRIPTION_CODE_CANCELLED",
        "SUBSCRIPTION_CODE_EXPIRED"
      ],
      "default": "SUBSCRIPTION_CODE_UNSPECIFIED",
      "description": "SubscriptionCode represents the code of the subscription.\n\n - SUBSCRIPTION_CODE_STARTED: SUBSCRIPTION_CODE_STARTED represents that a subscription has started.\n - SUBSCRIPTION_CODE_RENEWED: SUBSCRIPTION_CODE_RENEWED represents that a subscription has been renewed.\n - SUBSCRIPTION_CODE_CANCELLED: SUBSCRIPTION_CODE_CANCELLED represents that a subscription has been cancelled.\n - SUBSCRIPTION_CODE_EXPIRED: SUBSCRIPTION_CODE_EXPIRED represents that a subscription has expired.",
      "title": "SubscriptionCode"
    },
    "v1SubscriptionPayload": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "description": "product_id is the unique identifier of the product."
        },
        "purchaseToken": {
          "type": "string",
          "description": "purchase_token is the purchase token of the subscription."
        },
        "provider": {
          "$ref": "#/definitions/v1SubscriptionProvider",
          "description": "provider is the provider of the subscription."
        },
        "purchasedAt": {
          "type": "string",
          "format": "date-time",
          "description": "purchased_at is the time when the subscription was purchased."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "expires_at is the time when the subscription expires."
        }
      },
      "description": "SubscriptionPayload represents the payload of a subscription.",
      "title": "SubscriptionPayload"
    },
    "v1SubscriptionProvider": {
      "type": "string",
      "enum": [
        "SUBSCRIPTION_PROVIDER_UNSPECIFIED",
        "SUBSCRIPTION_PROVIDER_APPLE",
        "SUBSCRIPTION_PROVIDER_GOOGLE",
        "SUBSCRIPTION_PROVIDER_STRIPE",
        "SUBSCRIPTION_PROVIDER_PAYCOMET"
      ],
      "default": "SUBSCRIPTION_PROVIDER_UNSPECIFIED",
      "description": "SubscriptionProvider represents the provider of the subscription.\n\n - SUBSCRIPTION_PROVIDER_APPLE: SUBSCRIPTION_PROVIDER_APPLE represents a subscription purchased through Apple.\n - SUBSCRIPTION_PROVIDER_GOOGLE: SUBSCRIPTION_PROVIDER_GOOGLE represents a subscription purchased through Google.\n - SUBSCRIPTION_PROVIDER_STRIPE: SUBSCRIPTION_PROVIDER_STRIPE represents a subscription purchased through Stripe.\n - SUBSCRIPTION_PROVIDER_PAYCOMET: SUBSCRIPTION_PROVIDER_PAYCOMET represents a subscription purchased through Paycomet.",
      "title": "SubscriptionProvider"
    },
    "v1SubscriptionType": {
      "type": "string",
      "enum": [
        "SUBSCRIPTION_TYPE_UNSPECIFIED",
        "SUBSCRIPTION_TYPE_TRIAL",
        "SUBSCRIPTION_TYPE_PREMIUM",
        "SUBSCRIPTION_TYPE_MANUAL_PREMIUM",
        "SUBSCRIPTION_TYPE_FREE"
      ],
      "default": "SUBSCRIPTION_TYPE_UNSPECIFIED",
      "description": "SubscriptionType represents the type of subscription that a user has purchased.\n\n - SUBSCRIPTION_TYPE_TRIAL: SUBSCRIPTION_TYPE_TRIAL represents a trial subscription.\n - SUBSCRIPTION_TYPE_PREMIUM: SUBSCRIPTION_TYPE_PREMIUM represents a premium subscription.\n - SUBSCRIPTION_TYPE_MANUAL_PREMIUM: SUBSCRIPTION_TYPE_MANUAL_PREMIUM represents a manual premium subscription.\n - SUBSCRIPTION_TYPE_FREE: SUBSCRIPTION_TYPE_FREE represents a user with no subscription.",
      "title": "SubscriptionType"
    },
    "v1UpdateUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "success is the success of the operation."
        }
      },
      "description": "UpdateUserResponse represents a response to update a user.",
      "title": "UpdateUserResponse"
    },
    "v1UpsertPrivacyPolicyResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "success is the success of the operation."
        }
      },
      "description": "UpsertPrivacyPolicyResponse represents a response to create or update the privacy policy of a user.",
      "title": "UpsertPrivacyPolicyResponse"
    },
    "v1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the unique identifier of the user."
        },
        "email": {
          "type": "string",
          "description": "email is the email of the user."
        },
        "name": {
          "type": "string",
          "description": "name is the name of the user."
        },
        "image": {
          "type": "string",
          "description": "image is the image URL of the user."
        },
        "provider": {
          "$ref": "#/definitions/v1UserProvider",
          "description": "provider is the provider of the user."
        },
        "privacyPolicies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PrivacyPolicy"
          },
          "description": "privacy_policies is the list of privacy policies accepted by the user."
        }
      },
      "description": "User represents a user of the application.",
      "title": "User"
    },
    "v1UserProvider": {
      "type": "string",
      "enum": [
        "USER_PROVIDER_UNSPECIFIED",
        "USER_PROVIDER_APPLE",
        "USER_PROVIDER_GOOGLE",
        "USER_PROVIDER_CUSTOM"
      ],
      "default": "USER_PROVIDER_UNSPECIFIED",
      "description": "UserProvider represents the provider of the user.\n\n - USER_PROVIDER_APPLE: USER_PROVIDER_APPLE represents a user registered through Apple.\n - USER_PROVIDER_GOOGLE: USER_PROVIDER_GOOGLE represents a user registered through Google.\n - USER_PROVIDER_CUSTOM: USER_PROVIDER_CUSTOM represents a user registered through email and password.",
      "title": "UserProvider"
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication bearer token: {'Authorization': 'Bearer \u003ctoken\u003e'}",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
